name: Deploy FastAPI App

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to DigitalOcean
        env:
          HOST: 159.89.245.206
          USERNAME: kevinlin192003
          TARGET_DIR: /var/www/fastapi_app
          APP_NAME: fastapi_app

        run: |
          ssh -o StrictHostKeyChecking=no $USERNAME@$HOST << EOF
            set -e
            echo "Navigating to project directory..."
            cd $TARGET_DIR

            echo "Fetching and resetting to latest GitHub commit..."
            git fetch origin
            git reset --hard origin/main

            echo "Activating virtual environment..."
            source venv/bin/activate

            echo "Installing Python dependencies..."
            pip install -r requirements.txt

            echo "Running Alembic migrations (will continue even if this fails)..."
            alembic upgrade head || {
              echo "Alembic migrations failed, but continuing deployment..."
              echo "Fixing database permissions..."
              sudo -u postgres psql -c "GRANT ALL ON SCHEMA public TO kevinlin192003;"
              sudo -u postgres psql -c "GRANT ALL ON ALL TABLES IN SCHEMA public TO kevinlin192003;"
              
              echo "Ensuring UserRole enum type exists..."
              sudo -u postgres psql -d fastapi_app -c "DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'userrole') THEN CREATE TYPE userrole AS ENUM ('ADMIN', 'MANAGER', 'USER'); END IF; END $$;"
              
              echo "Running database initialization script instead..."
              python -m app.db_init || echo "Database initialization failed, but continuing..."
            }

            echo "Checking if PM2 is installed..."
            if ! command -v pm2 &> /dev/null
            then
              echo "PM2 not found, installing..."
              npm install -g pm2
            else
              echo "PM2 is already installed"
            fi

            echo "Loading environment variables..."
            export $(cat .env | grep -v '^#' | xargs)
            
            echo "Stopping any existing processes..."
            pkill -f 'uvicorn main:app' || true
            pm2 delete $APP_NAME || true
            
            echo "Starting FastAPI application with PM2..."
            pm2 start "venv/bin/python -m uvicorn main:app --host 0.0.0.0 --port 8000" --name $APP_NAME

            echo "Saving PM2 state..."
            pm2 save
          EOF
